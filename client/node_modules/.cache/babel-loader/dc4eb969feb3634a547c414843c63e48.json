{"ast":null,"code":"const compareKey = key => (a, b) => {\n  if (a[key] < b[key]) {\n    return -1;\n  }\n\n  if (a[key] > b[key]) {\n    return 1;\n  }\n\n  return 0;\n}; // one liner\n// const compareKey = key => (a, b) => a[key] == b[key]? (a[key] < b[key] ? -1 : 1) : 0\n\n\nexport const AZ = arr => arr.sort(compareKey('name'));\nexport const ZA = arr => arr.sort(compareKey('name')).reverse();\nexport const lowestFirst = arr => arr.sort((a, b) => parseInt(a.price) - parseInt(b.price));\nexport const highestFirst = arr => arr.sort((a, b) => parseInt(b.price) - parseInt(a.price));","map":{"version":3,"sources":["/Users/jppolanco/General_Assembly/sei/apollo/unit_3/products-full-stack/client/src/components/Sort.js"],"names":["compareKey","key","a","b","AZ","arr","sort","ZA","reverse","lowestFirst","parseInt","price","highestFirst"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,GAAG,IACpB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACR,MAAID,CAAC,CAACD,GAAD,CAAD,GAASE,CAAC,CAACF,GAAD,CAAd,EAAqB;AACnB,WAAO,CAAC,CAAR;AACD;;AACD,MAAIC,CAAC,CAACD,GAAD,CAAD,GAASE,CAAC,CAACF,GAAD,CAAd,EAAqB;AACnB,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD,CATH,C,CAWA;AACA;;;AAEA,OAAO,MAAMG,EAAE,GAAGC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASN,UAAU,CAAC,MAAD,CAAnB,CAAlB;AACP,OAAO,MAAMO,EAAE,GAAGF,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASN,UAAU,CAAC,MAAD,CAAnB,EAA6BQ,OAA7B,EAAlB;AACP,OAAO,MAAMC,WAAW,GAAGJ,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS,CAACJ,CAAD,EAAIC,CAAJ,KAAUO,QAAQ,CAACR,CAAC,CAACS,KAAH,CAAR,GAAoBD,QAAQ,CAACP,CAAC,CAACQ,KAAH,CAA/C,CAA3B;AACP,OAAO,MAAMC,YAAY,GAAGP,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS,CAACJ,CAAD,EAAIC,CAAJ,KAAUO,QAAQ,CAACP,CAAC,CAACQ,KAAH,CAAR,GAAoBD,QAAQ,CAACR,CAAC,CAACS,KAAH,CAA/C,CAA5B","sourcesContent":["const compareKey = key =>\n  (a, b) => {\n    if (a[key] < b[key]) {\n      return -1\n    }\n    if (a[key] > b[key]) {\n      return 1\n    }\n    return 0\n  }\n\n// one liner\n// const compareKey = key => (a, b) => a[key] == b[key]? (a[key] < b[key] ? -1 : 1) : 0\n\nexport const AZ = arr => arr.sort(compareKey('name'))\nexport const ZA = arr => arr.sort(compareKey('name')).reverse()\nexport const lowestFirst = arr => arr.sort((a, b) => parseInt(a.price) - parseInt(b.price))\nexport const highestFirst = arr => arr.sort((a, b) => parseInt(b.price) - parseInt(a.price))"]},"metadata":{},"sourceType":"module"}